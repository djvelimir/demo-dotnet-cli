@startuml Class
interface IProgram {
    + Start(args: string[])
}

class Program {
    - argumentProcessor: IArgumentProcessor
    - {static} Main(args: string[])
}

interface IArgumentValidator {
    + Validate(args: string[]): boolean
}

class ArgumentValidator {
}

interface IArgumentProcessor {
    + Process(args: string[])
}

class ArgumentProcessor {
    - argumentValidator: IArgumentValidator
    - passwordGenerator: IPasswordGenerator
    - terminal: ITerminal
}

interface ITerminal {
    + Show(message: string)
}

class Terminal {
}

interface IPasswordGenerator {
    + Generate(): string
}

class PasswordGenerator {
    - passwordLength: int
    - randomCharacterGenerator: IRandomCharacterGenerator
    - stringShuffler: IStringShuffler
}

interface IRandomCharacterGenerator {
    + GenerateUppercaseCharacter(): char
    + GenerateLowercaseCharacter(): char
    + GenerateDigitCharacter(): char
    + GenerateSpecialCharacter(): char
    + GenerateAllowedCharacter(): char
}

class RandomCharacterGenerator {
    - uppercaseCharacters: string
    - lowercaseCharacters: string
    - digitCharacters: string
    - specialCharacters: string
    - allowedCharacters: string
    - random: Random
}

interface IStringShuffler {
    + Shuffle(characters: string): string
}

class StringShuffler {
    - random: Random
}

IArgumentValidator <|-- ArgumentValidator
IArgumentProcessor <|-- ArgumentProcessor
ITerminal <|-- Terminal
IPasswordGenerator <|-- PasswordGenerator
IProgram <|-- Program
IRandomCharacterGenerator <|-- RandomCharacterGenerator
IStringShuffler <|-- StringShuffler

Program *--l IArgumentProcessor

ArgumentProcessor *--l IArgumentValidator
ArgumentProcessor *--d IPasswordGenerator
ArgumentProcessor *--r ITerminal

PasswordGenerator *--l IRandomCharacterGenerator
PasswordGenerator *--r IStringShuffler
@enduml